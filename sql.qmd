---
title: "SQL and Database"
---

# Instructions

The top 18 columns show a simplistic overview of 3 tables we have at Overstock.com. Your task will be to write SQL as if you were querying these tables to retrieve the data as specified in the questions.

The questions will require you to join tables and make calculations within the SQL to get the desired output.

Please note column E (notes) to verify you are using columns and data correctly as you write the SQL.

## Database Metadata

```{r}
#| echo: false

df <- read.csv("data/database-metadata.csv", check.names = F)
# knitr::kable(df)
kableExtra::kbl(df) |>
  kableExtra::kable_styling(font_size = 12)
```

# Questions

## Question 1

### Prompt

Show me sale revenue (top line & bottom line) by Marketing channel for the past 90 days trended by day.

### Answer

```{r}
#| echo: false
#| warning: false
#| output: false
library(tidyverse)
library(DBI)
library(RSQLite)
library(dbplyr)

BI_VISIT <- read.csv("data/bi-visit.csv", check.names = F)
BI_SALES <- read.csv("data/bi-sales.csv", check.names = F)
BI_CAMPAIGN_DESCRIPTION <- read.csv("data/bi-campaign-description.csv", check.names = F)

con <- DBI::dbConnect(RSQLite::SQLite(), 
                      dbname = ":memory:")
copy_to(dest = con, 
        df = BI_VISIT, 
        name = "BI_VISIT")

copy_to(dest = con, 
        df = BI_SALES, 
        name = "BI_SALES")

copy_to(dest = con, 
        df = BI_CAMPAIGN_DESCRIPTION, 
        name = "BI_CAMPAIGN_DESCRIPTION")

# dbListTables(con)
```

The following query sums top-line revenue along with bottom line revenue and groups it day and channel for 90 days from the date the query is executed. There are also two additional columns which show the day-over-day trend for each day and channel.

```{sql max.print = 10}
#| connection: con
WITH sales_data AS (
  SELECT SALES_TRANSACTION_DATE AS "DAY"
    , CHANNEL_DESCRIPTION AS "CHANNEL"
    , SUM(REVENUE_TOP_LINE) AS "TOP_LINE"
    , LEAD(SUM(REVENUE_TOP_LINE), 1) 
      OVER(
        PARTITION BY CHANNEL_DESCRIPTION 
        ORDER BY SALES_TRANSACTION_DATE DESC
      ) AS "TOP_LAG"
    , SUM(REVENUE_BOTTOM_LINE) AS "BOTTOM_LINE"
    , LEAD(SUM(REVENUE_BOTTOM_LINE), 1) 
      OVER(
        PARTITION BY CHANNEL_DESCRIPTION 
        ORDER BY SALES_TRANSACTION_DATE DESC
      ) AS "BOTTOM_LAG"
  FROM BI_SALES
  LEFT JOIN BI_CAMPAIGN_DESCRIPTION
  ON SALES_TRANSACTION_CAMPAIGN_ID = CAMPAIGN_ID
  WHERE SALES_TRANSACTION_DATE >= DATETIME('now', '-90 day')
  GROUP BY SALES_TRANSACTION_DATE, CHANNEL_DESCRIPTION
  ORDER BY SALES_TRANSACTION_DATE DESC
)

SELECT DAY
  , CHANNEL
  , TOP_LINE
  , (TOP_LINE - TOP_LAG) / TOP_LAG * 100 AS "% DAILY TOP LINE TREND"
  , BOTTOM_LINE
  , (BOTTOM_LINE - BOTTOM_LAG) / BOTTOM_LAG AS "% DAILY BOTTOM LINE TREND"
FROM sales_data;
```

## Question 2

### Prompt

Show me the number of visits, visitors and bounce rate for each Marketing Channel for the past 90 days trended by day. (Hint: Bounce rate = Single page view visits / total visits)

### Answer

The following query counts distinct visits and visitors along with the bounce rate and groups it day and channel for 90 days from the date the query is executed.

```{sql max.print = 20}
#| connection: con
with visits_data AS (
  SELECT VISIT_DT AS "DAY"
    , CHANNEL_DESCRIPTION AS "CHANNEL"
    , COUNT(DISTINCT VISIT_ID) AS "VISITS"
    , COUNT(DISTINCT VISITOR_ID) AS "VISITORS"
    , SUM(
      CASE
        WHEN PAGE_VIEW_COUNT = 1 THEN 1
        ELSE 0
      END) AS "BOUNCES"
  FROM BI_VISIT
  LEFT JOIN BI_CAMPAIGN_DESCRIPTION
  ON FIRST_PAGE_VIEW_CAMPAIGN_ID = CAMPAIGN_ID
  WHERE VISIT_DT >= DATETIME('now', '-90 day')
  GROUP BY VISIT_DT, CHANNEL_DESCRIPTION
  ORDER BY VISIT_DT DESC
)

SELECT DAY
  , CHANNEL
  , VISITS
  , VISITORS
  , BOUNCES / VISITS AS "BOUNCE RATE"
FROM visits_data
```

## Question 3

### Prompt

Show me the number of visits each Marketing channel acquired and the revenue (top line & Bottom line) for each last clicked Marketing channel for the past 90 days trended by day. Calculate conversion rate (orders/visits). Answer in one query.

### Answer

The following query counts the number of distinct visits, sums the top-line and bottom-line revenue, and calculates the conversion rate for each day and channel.

```{sql max.print = 10}
#| connection: con
SELECT SALES_TRANSACTION_DATE AS "DAY"
  , CHANNEL_DESCRIPTION AS "CHANNEL"
  , COUNT(DISTINCT BI_VISIT.VISIT_ID) AS "VISITS"
  , SUM(REVENUE_TOP_LINE) AS "TOP LINE"
  , SUM(REVENUE_BOTTOM_LINE) AS "BOTTOM_LINE"
  , COUNT(DISTINCT SALES_TRANSACTION_ID) / COUNT(DISTINCT BI_VISIT.VISIT_ID) AS "CONVERSION RATE"
FROM BI_VISIT
LEFT JOIN BI_SALES ON BI_VISIT.VISIT_ID = BI_SALES.VISIT_ID
LEFT JOIN BI_CAMPAIGN_DESCRIPTION ON SALES_TRANSACTION_CAMPAIGN_ID = CAMPAIGN_ID
WHERE SALES_TRANSACTION_DATE >= DATETIME('now', '-90 day')
GROUP BY SALES_TRANSACTION_DATE, CHANNEL_DESCRIPTION
ORDER BY SALES_TRANSACTION_DATE DESC
```
